# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mathtest.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='mathtest.proto',
  package='mathtest',
  syntax='proto3',
  serialized_options=_b('\n\007ex.grpc'),
  serialized_pb=_b('\n\x0emathtest.proto\x12\x08mathtest\"#\n\x0bMathRequest\x12\t\n\x01\x61\x18\x01 \x01(\x05\x12\t\n\x01\x62\x18\x02 \x01(\x05\"\x1b\n\tMathReply\x12\x0e\n\x06result\x18\x01 \x01(\x05\x32G\n\x08MathTest\x12;\n\x0bsendRequest\x12\x15.mathtest.MathRequest\x1a\x13.mathtest.MathReply\"\x00\x42\t\n\x07\x65x.grpcb\x06proto3')
)




_MATHREQUEST = _descriptor.Descriptor(
  name='MathRequest',
  full_name='mathtest.MathRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='a', full_name='mathtest.MathRequest.a', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='b', full_name='mathtest.MathRequest.b', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=28,
  serialized_end=63,
)


_MATHREPLY = _descriptor.Descriptor(
  name='MathReply',
  full_name='mathtest.MathReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='result', full_name='mathtest.MathReply.result', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=65,
  serialized_end=92,
)

DESCRIPTOR.message_types_by_name['MathRequest'] = _MATHREQUEST
DESCRIPTOR.message_types_by_name['MathReply'] = _MATHREPLY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

MathRequest = _reflection.GeneratedProtocolMessageType('MathRequest', (_message.Message,), {
  'DESCRIPTOR' : _MATHREQUEST,
  '__module__' : 'mathtest_pb2'
  # @@protoc_insertion_point(class_scope:mathtest.MathRequest)
  })
_sym_db.RegisterMessage(MathRequest)

MathReply = _reflection.GeneratedProtocolMessageType('MathReply', (_message.Message,), {
  'DESCRIPTOR' : _MATHREPLY,
  '__module__' : 'mathtest_pb2'
  # @@protoc_insertion_point(class_scope:mathtest.MathReply)
  })
_sym_db.RegisterMessage(MathReply)


DESCRIPTOR._options = None

_MATHTEST = _descriptor.ServiceDescriptor(
  name='MathTest',
  full_name='mathtest.MathTest',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=94,
  serialized_end=165,
  methods=[
  _descriptor.MethodDescriptor(
    name='sendRequest',
    full_name='mathtest.MathTest.sendRequest',
    index=0,
    containing_service=None,
    input_type=_MATHREQUEST,
    output_type=_MATHREPLY,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_MATHTEST)

DESCRIPTOR.services_by_name['MathTest'] = _MATHTEST

# @@protoc_insertion_point(module_scope)
